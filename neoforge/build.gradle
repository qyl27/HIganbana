architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(':').loom.accessWidenerPath
    runtimeOnlyLog4j = false

    runs {
        client {
            client()

            runDir = 'run/client'

            property '-XX:+IgnoreUnrecognizedVMOptions'
            property '-XX:+AllowEnhancedClassRedefinition'
        }

        client {
            server()

            runDir = 'run/server'

            property '-XX:+IgnoreUnrecognizedVMOptions'
            property '-XX:+AllowEnhancedClassRedefinition'
        }

        data {
            data()

            programArgs '--all', '--mod', 'higanbana'
            programArgs '--output', project(':').file('src/generated/resources').absolutePath
            programArgs '--existing', project(':').file('src/main/resources').absolutePath
        }
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"
    modImplementation "net.tslat.smartbrainlib:SmartBrainLib-neoforge-${rootProject.minecraft_major_version}:${rootProject.smart_brain_lib_version}"

    common(project(path: ':', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':', configuration: 'transformProductionNeoForge')
}

remapJar {
    atAccessWideners.add(loom.accessWidenerPath.get().asFile.name)
}
