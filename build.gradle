import java.time.ZonedDateTime

plugins {
    id 'architectury-plugin' version "${architectury_plugin_version}"
    id 'dev.architectury.loom' version "${architectury_loom_plugin_version}" apply false
    id 'com.github.johnrengelman.shadow' version "${shadow_plugin_version}" apply false
}

def ENV = System.getenv()

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'architectury-plugin'
    apply plugin: 'dev.architectury.loom'
    group = rootProject.maven_group
    version = rootProject.mod_version

    architectury {
        minecraft = rootProject.minecraft_version
    }

    loom {
        silentMojangMappingsLicense()

        runConfigs.configureEach {
            ideConfigGenerated = false
        }
    }

    repositories {
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }

        maven {
            name = 'Mod Menu'
            url = 'https://maven.terraformersmc.com/releases'
        }

        maven {
            name = "SmartBrainLib (SBL) Maven Repo"
            url = "https://dl.cloudsmith.io/public/tslat/sbl/maven/"
        }

        maven {
            name = 'NeoForged'
            url = 'https://maven.neoforged.net/releases'
        }

        maven {
            name = 'Patchouli'
            url = 'https://maven.blamejared.com'
        }

        mavenCentral()

        maven {
            name = 'Curse maven'
            url = 'https://cursemaven.com'
            content {
                includeGroup 'curse.maven'
            }
        }

        maven {
            name = 'Modrinth'
            url = 'https://api.modrinth.com/maven'

            content {
                includeGroup 'maven.modrinth'
            }
        }
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"

        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${rootProject.parchment_minecraft_version}:${rootProject.parchment_version}@zip")
        }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }

    processResources {
        var resourcesToReplace = ['build_info.properties',
                                  'pack.mcmeta',
                                  'META-INF/neoforge.mods.toml',
                                  'fabric.mod.json']
        var replaceTokens = [
                mod_version: mod_version,
                build_time: ZonedDateTime.now().toString(),
                minecraft_version: minecraft_version,
                parchment_version: parchment_version,
                fabric_loader_version: fabric_loader_version,
                fabric_api_version: fabric_api_version,
                neoforge_version: neoforge_version,
                architectury_api_version: architectury_api_version,
                fabric_mod_menu_version: fabric_mod_menu_version,
                fabric_sodium_version: fabric_sodium_version,
                fabric_iris_version: fabric_iris_version,
                smart_brain_lib_version: smart_brain_lib_version,
        ]

        inputs.properties replaceTokens
        filesMatching(resourcesToReplace) {
            expand replaceTokens
        }

        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    publishing {
        repositories {
            mavenLocal()

            maven {
                name = 'YuluoMaven'

                def releaseUrl = 'https://maven.yuluo.dev/repository/maven-releases/'
                def snapshotUrl = 'https://maven.yuluo.dev/repository/maven-snapshots/'
                url = ENV.MOD_RELEASE ? releaseUrl : snapshotUrl

                credentials {
                    username ENV.MOD_MAVEN_USER
                    password ENV.MOD_MAVEN_PASS
                }
            }
        }
    }
}

architectury {
    common project.enabled_platforms.split(',')
}

loom {
    accessWidenerPath = file('src/main/resources/higanbana.accesswidener')
}

dependencies {
    modImplementation "dev.architectury:architectury:$rootProject.architectury_api_version"
    modImplementation "net.tslat.smartbrainlib:SmartBrainLib-common-${project.minecraft_major_version}:${project.smart_brain_lib_version}"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

subprojects {
    apply plugin: 'com.github.johnrengelman.shadow'

    base {
        archivesName = "$rootProject.archives_name-$project.name"
    }

    loom {
        runs {
            client {
                client()
                ideConfigGenerated = true
                runDir = 'run/client'

                property '-XX:+IgnoreUnrecognizedVMOptions'
                property '-XX:+AllowEnhancedClassRedefinition'
            }

            server {
                server()
                ideConfigGenerated = true
                runDir = 'run/server'

                property '-XX:+IgnoreUnrecognizedVMOptions'
                property '-XX:+AllowEnhancedClassRedefinition'
            }
        }
    }

    configurations {
        shadowBundle {
            canBeResolved = true
            canBeConsumed = false
        }
    }

    shadowJar {
        configurations = [project.configurations.shadowBundle]
        archiveClassifier = 'dev-shadow'
    }

    remapJar {
        input.set shadowJar.archiveFile
        dependsOn shadowJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }
    }
}
